Dictionary<string, string> dicBody = new Dictionary<string, string>();
dicBody.Add("#SalesManagerName#", salesManagerName);
dicBody.Add("#DistributorNames#", distributorName);
dicBody.Add("#CBPName#", cbpName);
dicBody.Add("#BUName#", buName); 
if (dicBodyReplace != null)
{
	foreach (KeyValuePair<string, string> item in dicBodyReplace)
	{
		emailBody = emailBody.Replace(item.Key, item.Value);
	}
}
=================================
public class LDAPUtil
{
	private static string ADPath = GetADPath();

	private static string GetADPath()
	{
		return ApplicationSettingsFactory.GetApplicationSettings().ADPath;
	}

	private static string DomainName = GetDomainName();

	private static string GetDomainName()
	{
		return String.Empty;
	}

	public static bool DomainLogin(String UserApId, String UserId, String Pwd)
	{
		bool result = false;
		string LDAPPath = "LDAP://" + GetADPath();
		DirectoryEntry entry = new DirectoryEntry(LDAPPath, UserApId, Pwd);
		try
		{
			//绑定到本机 AdsObject 以强制身份验证。
			DirectorySearcher search = new DirectorySearcher(entry);
			search.Filter = "(SAMAccountName=" + UserId + ")";
			search.PropertiesToLoad.Add("cn");
			SearchResult sr = search.FindOne();
			if (sr != null)
			{
				result = true;
			}
		}
		catch
		{
			result = false;
		}
		return result;
	}
}
===================================================
public static Stream ToStream(this byte[] bytes)
{
	Stream stream = new MemoryStream(bytes);
	return stream;
}

public static byte[] ToBytes(this Stream stream)
{
	if (stream == null)
		return null;
	Byte[] bytes = new Byte[stream.Length];
	stream.Read(bytes, 0, bytes.Length);
	stream.Seek(0, SeekOrigin.Begin);
	stream.Close();
	return bytes;
}
public static string GetFileType(string ext)
{
	string type = string.Empty;
	switch (ext)
	{
		case ".PDF":
			type = "application/pdf";
			break;
		case ".JPEG":
			type = "image/jpeg";
			break;
		case ".JPG":
			type = "image/jpeg";
			break;
		case ".PNG":
			type = "image/png";
			break;
		case ".GIF":
			type = "image/gif";
			break;
		case ".TIFF":
			type = "image/tiff";
			break;
		case ".TIF":
			type = "image/tif";
			break;
		case ".DOC":
			type = "application/msword";
			break;
		case ".DOCX":
			type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
			break;
		case ".XLS":
			type = "application/vnd.ms-excel";
			break;
		case ".XLSX":
			type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
			break;
		case ".PPT":
			type = "application/vnd.ms-powerpoint";
			break;
		case ".PPTX":
			type = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
			break;
		case ".TXT":
			type = "text/plain";
			break;
		case ".XLSM":
			type = "application/vnd.ms-excel.sheet.macroEnabled.12";
			break;
		case ".XLTM":
			type = "application/vnd.ms-excel.template.macroEnabled.12";
			break;
		case ".XLTX":
			type = "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
			break;
		case ".XLAM":
			type = "application/vnd.ms-excel.addin.macroEnabled.12";
			break;
		case ".XLSB":
			type = "application/vnd.ms-excel.sheet.binary.macroEnabled.12";
			break;
		case ".DOTX":
			type = "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
			break;
		case ".DOCM":
			type = "application/vnd.ms-word.document.macroEnabled.12";
			break;
		case ".DOTM":
			type = "application/vnd.ms-word.template.macroEnabled.12";
			break;
		default:
			type = "application/octet-stream";
			break;
	}
	return type;
}

public static string GetContentTypeBy(string filename, out bool shouldDownload)
{
	shouldDownload = true;
	if (string.IsNullOrEmpty(filename))
	{
		return string.Empty;
	}

	string extUpper = Path.GetExtension(filename).ToUpper();

	switch (extUpper)
	{
		case ".PDF":
		case ".JPEG":
		case ".JPG":
		case ".PNG":
		case ".GIF":
		case ".TXT":
			shouldDownload = false;
			break;
	}

	return GetFileType(extUpper);
}
public static string ToThousandsText(this decimal? value)
{
	return value.GetValueOrDefault().ToString("###,###");
}

public static string ToThousandsText(this decimal value)
{
	return value.ToString("###,###");
}

public static string ToThousandsWithoutDecimalPointText(this decimal? value)
{
	return value.GetValueOrDefault().ToString("###,#");
}

public static string ToThousandsWithoutDecimalPointText(this decimal value)
{
	return value.ToString("###,#");
}

public static string Truncate(this string str,int len)
{
	if (!string.IsNullOrEmpty(str) && str.Length > len)
	{
		return str.Substring(0, 15) + "...";
	}
	return str;
}
====================================================
public static void CheckEmailAdress(string fieldName, object value, StringBuilder errorMsg, params string[] msg)
{
	if (value != null && !String.IsNullOrEmpty(value.ToString()))
	{
		string emailStr = @"^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,5})+$";
		//邮箱正则表达式对象
		Regex emailReg = new Regex(emailStr);
		if (emailReg.IsMatch(value.ToString().Trim()))
		{
			InitErrorMsg(errorMsg);
			AppendErrorMsg(errorMsg, string.Format(", {0} is not E-mail adress!", fieldName), msg);
		}
	}
}
//客户端IP
public static String GetClientIp()
{
	if (HttpContext.Current.Request.ServerVariables["HTTP_VIA"] != null) // using proxy
	{
		return HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString();  // Return real client IP.
	}
	else// not using proxy or can't get the Client IP
	{
		return HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"].ToString(); //While it can't get the Client IP, it will return proxy IP.
	}
}


private static byte[] IV = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF };
public static String Encrypt(String Key, String ClearText)
{
	byte[] rgbKey = Encoding.UTF8.GetBytes(Key.Substring(0, 8));
	byte[] rgbIV = IV;
	byte[] clearTextArray = Encoding.UTF8.GetBytes(ClearText);
	try
	{
		DESCryptoServiceProvider dCSP = new DESCryptoServiceProvider();
		MemoryStream mStream = new MemoryStream();
		CryptoStream cStream = new CryptoStream(mStream, dCSP.CreateEncryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
		cStream.Write(clearTextArray, 0, clearTextArray.Length);
		cStream.FlushFinalBlock();
		return Convert.ToBase64String(mStream.ToArray());
	}
	catch
	{
		return string.Empty;
	}
}


//private static byte[] IV = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF };
public static String Decrypt(String Key, String DecryptText)
{
	try
	{
		byte[] rgbKey = Encoding.UTF8.GetBytes(Key.Substring(0, 8));
		byte[] rgbIV = IV;
		byte[] decryptArray = Convert.FromBase64String(DecryptText);
		DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider();
		MemoryStream mStream = new MemoryStream();
		CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
		cStream.Write(decryptArray, 0, decryptArray.Length);
		cStream.FlushFinalBlock();
		return Encoding.UTF8.GetString(mStream.ToArray());
	}
	catch
	{
		return string.Empty;
	}
}


public static bool IsEmail(String v)
{
	return Regex.IsMatch(v, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$", RegexOptions.IgnoreCase);
}


public static String GeneratePassword(int pwdlen)
{
	String pwdchars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@!#$%&*";
	string tmpstr = "";
	int iRandNum;
	for (int i = 0; i < pwdlen; i++)
	{
		iRandNum = new Random().Next(pwdchars.Length);
		tmpstr += pwdchars[iRandNum];
	} return tmpstr;
}
===========================================================
public static RouteValueDictionary AddQueryStringParameters(this RouteValueDictionary dict)
{
	var querystring = HttpContext.Current.Request.QueryString;

	foreach (var key in querystring.AllKeys)
		if (key != null && !dict.ContainsKey(key))
		{
			var values = querystring.GetValues(key);
			if (values != null)
				dict.Add(key, values[0]);
		}

	return dict;
}

public static RouteValueDictionary ExceptFor(this RouteValueDictionary dict, params string[] keysToRemove)
{
	foreach (var key in keysToRemove)
		if (dict.ContainsKey(key))
			dict.Remove(key);

	return dict;
}
==========================================================
namespace System.Web.Mvc
{
    public static class HtmlHelperExtensions
    {
        #region BuildNextPreviousLinks
        public static MvcHtmlString BuildNextPreviousLinks(this HtmlHelper htmlHelper, IPageOptions queryOptions)
        {
            var urlHelper = new UrlHelper(htmlHelper.ViewContext.RequestContext);

            var controllerName = htmlHelper.ViewContext.RouteData.Values["controller"].ToString();
            var actionName = htmlHelper.ViewContext.RouteData.Values["action"].ToString();

            RouteValueDictionary routeData = new RouteValueDictionary();
            routeData.AddQueryStringParameters();

            StringBuilder content = new StringBuilder();
            content.Append("<table><tr><td class = \"td\">");
            content.Append(BuildFirstLink(urlHelper, queryOptions, actionName, controllerName, routeData));
            content.Append(BuildPreviousLink(urlHelper, queryOptions, actionName, controllerName, routeData));
            content.Append(BuildPageNumber(queryOptions));
            content.Append(BuildNextLink(urlHelper, queryOptions, actionName, controllerName, routeData));
            content.Append(BuildLastLink(urlHelper, queryOptions, actionName, controllerName, routeData));
            content.Append("</td></tr></table>");

            return new MvcHtmlString(content.ToString());
        }

        private static string BuildFirstLink(UrlHelper urlHelper, IPageOptions queryOptions,
            string actionName, string controllerName, RouteValueDictionary routeData)
        {
            routeData.Remove("page");
            routeData["page"] = 1;

            if (queryOptions.HasPreviousPage)
            {
                return string.Format(
                    "<a href=\"{0}\"> |&lt; </a>",
                    urlHelper.Action(actionName, controllerName, routeData)
                    );
            }
            return string.Empty;
        }

        private static string BuildPreviousLink(UrlHelper urlHelper, IPageOptions queryOptions,
            string actionName, string controllerName, RouteValueDictionary routeData)
        {
            routeData.Remove("page");
            routeData["page"] = queryOptions.IsFirstPage ? 1 : queryOptions.PageIndex - 1;
            if (queryOptions.HasPreviousPage)
            {
                return string.Format(
                    "<a href=\"{0}\"> &lt; </a>",
                    urlHelper.Action(actionName, controllerName, routeData)
                );
            }
            return string.Empty;
        }

        private static string BuildPageNumber(IPageOptions queryOptions)
        {
            return string.Format("Page <input type=\"text\" name=\"txtPage\" value=\"{0}\"/> of {1}", 
                queryOptions.PageIndex, queryOptions.TotalPageCount);
        }

        private static string BuildNextLink(UrlHelper urlHelper, IPageOptions queryOptions,
            string actionName, string controllerName, RouteValueDictionary routeData)
        {
            routeData.Remove("page");
            routeData["page"] = queryOptions.IsLastPage ? queryOptions.TotalPageCount : queryOptions.PageIndex + 1;

            if (queryOptions.HasNextPage)
            {
                return string.Format(
                    "<a href=\"{0}\"> &gt; </a>",
                    urlHelper.Action(actionName, controllerName, routeData)
                );
            }
            return string.Empty;
        }

        private static string BuildLastLink(UrlHelper urlHelper, IPageOptions queryOptions,
            string actionName, string controllerName, RouteValueDictionary routeData)
        {
            routeData.Remove("page");
            routeData["page"] = queryOptions.TotalPageCount;

            if (queryOptions.HasNextPage)
            {
                return string.Format(
                    "<a href=\"{0}\"> &gt;| </a>",
                    urlHelper.Action(actionName, controllerName, routeData)
                );
            }
            return string.Empty;
        }

        #endregion BuildNextPreviousLinks

        public static HtmlString HtmlConvertToJson(this HtmlHelper htmlHelper, object model)
        {
            var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                Formatting = Formatting.Indented
            };

            return new HtmlString(JsonConvert.SerializeObject(model, settings));
        }

        public static MvcHtmlString BuildSortableLink(this HtmlHelper htmlHelper,
            string fieldName, string sortField, IPageOptions queryOptions)
        {
            var controllerName = htmlHelper.ViewContext.RouteData.Values["controller"].ToString();
            var actionName = htmlHelper.ViewContext.RouteData.Values["action"].ToString();
            var urlHelper = new UrlHelper(htmlHelper.ViewContext.RequestContext);
            var isCurrentSortField = queryOptions.SortField.ToLower() == sortField.ToLower();

            RouteValueDictionary routeData = new RouteValueDictionary();
            routeData.AddQueryStringParameters();
            routeData["SortField"] = sortField;
            SortOrder sortOrder = (isCurrentSortField
                && queryOptions.SortOrder == SortOrder.Asc) ? SortOrder.Desc : SortOrder.Asc;
            routeData["SortOrder"] = sortOrder;
            routeData["page"] = 1;

            string divDataAttr = isCurrentSortField ? "data-current=\"true\"" : "";

            return new MvcHtmlString(string.Format("<div {0} ><a href=\"{1}\">{2} {3}</a></div>",
                divDataAttr,
                urlHelper.Action( actionName, controllerName, routeData),
                fieldName,
                BuildSortIcon(isCurrentSortField, queryOptions)));
        }

        private static string BuildSortIcon(bool isCurrentSortField, IPageOptions queryOptions)
        {
            const string asc = " ↑";
            const string desc = " ↓";
           
            if (queryOptions != null && isCurrentSortField)
            {
                string sortIcon = asc;
                if (queryOptions.SortOrder == SortOrder.Desc)
                    sortIcon = desc;

                return string.Format("<span>{0}</span>", sortIcon);
            }

            return string.Empty;
        }

        public static MvcHtmlString SponsorshipFile(this HtmlHelper htmlHelper, string name, string url = "")
        {
            Tuple<string, string> model = new Tuple<string, string>(name, url);
            var html = new HtmlHelper<Tuple<string, string>>(htmlHelper.ViewContext,
                new ViewDataContainer<Tuple<string, string>>(model));
            return html.DisplayFor(m => model, "FileTemplate");
        }

        public static MvcHtmlString DataGride<TModel>(this HtmlHelper htmlHelper, DataGrideModel<TModel> model)
        {

            var html = new HtmlHelper<DataGrideModel<TModel>>(htmlHelper.ViewContext, new ViewDataContainer<DataGrideModel<TModel>>(model));
            var dataGrideTemplateModel = new DataGrideTemplateModel();
            var dateGrideModel = JsonConvert.SerializeObject(model, new JsonSerializerSettings
                        {
                            NullValueHandling = NullValueHandling.Include
                        });
            var type = typeof(TModel);
            var properties = type.GetProperties();
            foreach (var property in properties)
            {
                var attributes = property.GetCustomAttributes(true);
                foreach(var attribute in attributes)
                {
                    if (attribute is ShowToGrideAttribute
                        ||attribute is HideToGrideAttribute
                        ||attribute is LinkToGrideAttribute)
                    {
                        var column = new Column();
                        column.Name = property.Name;
                        column.Attribute = attribute as Attribute;
                        dataGrideTemplateModel.Columns.Add(column);
                        break;
                    }
                }
            }

            dataGrideTemplateModel.DateGrideModel = JObject.Parse(dateGrideModel);            
            return html.DisplayFor(m => dataGrideTemplateModel, "DataGrideTemplate");
        }

       
    }
    public class DataGrideTemplateModel
    {
        public DataGrideTemplateModel()
        {
            this.Columns = new List<Column>();
        }
        public IList<Column> Columns { get; set; }
        public JObject DateGrideModel { get; set; }

    }

    public class Column
    {
        public string Name { get; set; }

        public Attribute Attribute { get; set; }
    }

    public class DataGrideModel<T>
    {
        public IList<T> List { get; set; }

        private int pageSize = ValueConfig.PageSize;
        private int pageIndex = 1;
        private int pageCount = 1;

        public int PageIndex
        {
            get { return pageIndex < 1 ? 1 : (pageIndex > PageCount ? PageCount : pageIndex); }
            set { pageIndex = value; }
        }

        public int OriginalPageIndex
        {
            get { return pageIndex; }
            set { pageIndex = value; }
        }

        public int PageSize
        {
            get { return pageSize; }
            set { pageSize = value; }
        }

        public int RowCount { get; set; }
        public int PageCount
        {
            get
            {
                pageCount = (int)Math.Ceiling((float)RowCount / PageSize);
                return pageCount;
            }
        }

        public string Order { get; set; }

        public string Where { get; set; }

        public string SearchState { get; set; }

        public DataGrideModel()
        {
            
        }

        public DataGrideModel(IQueryable<T> allItems, string defaultOrder, string order, 
            int pageIndex = 1, int pageSize = 0)
        {
            Order = order;
            PageIndex = pageIndex;
            PageSize = pageSize == 0 ? ValueConfig.PageSize : pageSize;
            RowCount = allItems.Count();
            List = allItems.Pagination(string.IsNullOrEmpty(Order) ? defaultOrder : Order, PageIndex, PageSize).ToList();
        }
    }

    public class ShowToGrideAttribute : Attribute
    {
        public ShowToGrideAttribute(string title)
        {
            Title = title;
        }

        public string Title { get; set; }

        public string HeaderStyle { get; set; }

        public string CellStyle { get; set; }

        public string DateFormat { get; set; }
    }

    public class HideToGrideAttribute : Attribute
    {

    }

    public class LinkToGrideAttribute : ShowToGrideAttribute
    {
        public LinkToGrideAttribute(string title,string url, params object[] columns):base(title)
        {
            Url = url;
            Columns = columns;
        }

        public string Url { get; set; }

        public object[] Columns { get; set; }
    }

    public class IconLinkToGrideAttribute : LinkToGrideAttribute
    {
        public IconLinkToGrideAttribute(string title, string iconPath, string url, params object[] columns)
            : base(title,url,columns)
        {
            IconPath = iconPath;
        }

        public string IconPath { get; set; }
    }

    public class ButtonToGrideAttribute : ShowToGrideAttribute
    {
        public ButtonToGrideAttribute(string title, params string[] grideButtons)
            : base(title)
        {
            GrideButtons = grideButtons;
        }

        public string[] GrideButtons { get; set; }
    }

}
============================================
#region 扩展函数：   ToList()                //DataTable 转换为List 集合
/// <summary>
/// DataTable 转换为List 集合
/// </summary>
/// <typeparam name="TResult">类型</typeparam>
/// <param name="dt">DataTable</param>
/// <returns></returns>
public static List<TResult> ToList<TResult>(this DataTable dt) where TResult : class,new()
{

	//创建一个属性的列表

	List<PropertyInfo> prlist = new List<PropertyInfo>();

	//获取TResult的类型实例 反射的入口

	Type t = typeof(TResult);

	//获得TResult 的所有的Public 属性 并找出TResult属性和DataTable的列名称相同的属性(PropertyInfo) 并加入到属性列表

	Array.ForEach<PropertyInfo>(t.GetProperties(), p => { if (dt.Columns.IndexOf(p.Name) != -1) prlist.Add(p); });

	//创建返回的集合

	List<TResult> oblist = new List<TResult>();

	foreach (DataRow row in dt.Rows)
	{

		//创建TResult的实例

		TResult ob = new TResult();

		//找到对应的数据 并赋值

		prlist.ForEach(p => { if (row[p.Name] != DBNull.Value) p.SetValue(ob, row[p.Name], null); });

		//放入到返回的集合中.

		oblist.Add(ob);

	}

	return oblist;
}
#endregion

#region 扩展函数：   ToDataTable()           //List转换为DataTable
/// <summary>
/// 转换为一个DataTable
/// </summary>
/// <typeparam name="TResult">IEnumerable对象</typeparam>
/// <param name="value">DataTable对象</param>
/// <returns></returns>
public static DataTable ToDataTable<TResult>(this IEnumerable<TResult> value) where TResult : class
{

	//创建属性的集合

	List<PropertyInfo> pList = new List<PropertyInfo>();

	//获得反射的入口

	Type type = typeof(TResult);

	DataTable dt = new DataTable();

	//把所有的public属性加入到集合 并添加DataTable的列

	Array.ForEach<PropertyInfo>(type.GetProperties(), p =>
	{
		pList.Add(p);
		Type cotype = p.PropertyType;
		if (cotype.IsGenericType && (cotype.GetGenericTypeDefinition() == typeof(Nullable<>)))
		{
			cotype = cotype.GetGenericArguments()[0];
		}
		dt.Columns.Add(p.Name, cotype);
	});

	foreach (var item in value)
	{

		//创建一个DataRow实例

		DataRow row = dt.NewRow();

		//给row 赋值

		pList.ForEach(p => row[p.Name] = p.GetValue(item, null) == null ? DBNull.Value.ToString() : p.GetValue(item, null));

		//加入到DataTable

		dt.Rows.Add(row);

	}

	return dt;
}
#endregion
======================================
namespace MyCommon
{
    public class FileUploadHelper
    {
        public enum FileExtension
        {
            jpg = 255216, gif = 7173, bmp = 6677, png = 13780, xls = 208207, doc = 208207, docx = 8075, xlsx = 8075,pdf=3780
            // 255216 jpg;7173 gif;6677 bmp;13780 png; 7790 exe dll; 8297 rar; 6063 xml;6033 html;239187 aspx;117115 cs;119105 js;210187 txt;255254 sql;xls = 208207 
        }

        /// <summary>
        /// 使用文件固定字节法验证文件是否合法
        /// </summary>
        /// <param name="stream"></param>
        /// <param name="fileLen"></param>
        /// <returns></returns>
        private bool IsFileValidated(Stream stream, int fileLen)
        {
            if (fileLen == 0) return false;

            //自定义一个数组，包含所有允许上传的文件扩展名，这里只定义xls扩展名
            FileExtension[] fes = { FileExtension.gif, FileExtension.bmp, FileExtension.jpg, FileExtension.png, FileExtension.xls, FileExtension.xlsx, FileExtension.doc, FileExtension.docx, FileExtension.pdf };

            byte[] imgArray = new byte[fileLen];
            stream.Read(imgArray, 0, fileLen);
            MemoryStream ms = new MemoryStream(imgArray);
            System.IO.BinaryReader br = new System.IO.BinaryReader(ms);
            string fileBuffer = "";
            byte buffer;
            try
            {
                buffer = br.ReadByte();
                fileBuffer = buffer.ToString();
                buffer = br.ReadByte();
                fileBuffer += buffer.ToString();
            }
            catch
            {
            }
            br.Close();
            ms.Close();
            foreach (FileExtension item in fes)
            {
                if (Int32.Parse(fileBuffer) == (int)item)
                    return true;
            }

            return false;
        }

        /// <summary>
        /// 使用服务器控件FileUpload上传文件
        /// </summary>
        /// <param name="fu">服务器上传控件</param>
        /// <param name="saveDirectory">保存文件的目录地址</param>
        /// <param name="msg">提醒信息（如果上传失败，则提醒错误信息，否则返回的是文件已保存的文件名）</param>
        /// <returns></returns>
        public bool UploadFile(FileUpload fu, string saveDirectory, ref string msg)
        {
            bool hasSave = false;

            if (!fu.HasFile)
            {
                msg = "没找到可上传的文件";
                return false;
            }

            string fileName = fu.PostedFile.FileName;
            string fileExtension = Path.GetExtension(fileName).ToLower();
            //判断文件的类型和大小
            string type = fu.PostedFile.ContentType;
            int fileLen = fu.PostedFile.ContentLength;

            if (!IsFileValidated(fu.PostedFile.InputStream, fileLen))
            {
                msg = "上传的文件不合法，请检查！";
                return false;
            }

            try
            {
                if (!Directory.Exists(saveDirectory))
                {
                    Directory.CreateDirectory(saveDirectory);
                }

                string newFileName = CustomHelper.CreatedDateTimeString() + fileExtension;
                string fullPath = saveDirectory + "/" + newFileName;

                fu.SaveAs(fullPath);

                msg = newFileName;

                hasSave = true;
            }
            catch(Exception ex)
            {
                msg = ex.Message;
            }

            return hasSave;
        }

        /// <summary>
        /// 使用服务器控件FileUpload上传文件
        /// </summary>
        /// <param name="fu">服务器上传控件</param>
        /// <param name="saveDirectory">保存文件的目录地址</param>
        /// <param name="msg">返回提醒信息</param>
        /// <param name="dic">返回包含上传的文件属性信息</param>
        /// <returns></returns>
        public bool UploadFile(FileUpload fu, string saveDirectory, ref string msg, ref Dictionary<string, string> dic)
        {
            bool hasSave = false;

            if (!fu.HasFile)
            {
                msg = "没找到可上传的文件";
                return false;
            }

            string fileName = fu.PostedFile.FileName;
            string contentType = fu.PostedFile.ContentType;
            int contentLength = fu.PostedFile.ContentLength;
            string fileExtension = Path.GetExtension(fileName);

            if (!IsFileValidated(fu.PostedFile.InputStream, contentLength))
            {
                msg = "上传的文件不合法，请检查！";
                return false;
            }

            try
            {

                if (!Directory.Exists(saveDirectory))
                {
                    Directory.CreateDirectory(saveDirectory);
                }

                string newFileName = CustomHelper.CreatedDateTimeString() + fileExtension;
                string fullPath = saveDirectory + "/" + newFileName;

                fu.SaveAs(fullPath);
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }

            dic["FileName"] = fileName;
            dic["ContentType"] = contentType;
            dic["ContentLength"] = contentLength.ToString();
            dic["FileExtension"] = fileExtension;

            return hasSave;
        }
    }
}
======================================
//图片处理类库

public static class MyPic
{

	#region 生成缩略图
	/// <summary>
	/// 生成缩略图
	/// </summary>
	/// <param name="originalImagePath">源图路径（物理路径  Server.MapPath）</param>
	/// <param name="thumbnailPath">缩略图路径（物理路径  Server.MapPath）</param>
	/// <param name="width">缩略图宽度</param>
	/// <param name="height">缩略图高度</param>
	/// <param name="mode">生成缩略图的方式 "HW":指定高宽缩放（可能变形） ,
	///                                     "AUTO" : 指定高宽,居中放入白底背景中 ,
	///                                     "W":指定宽，高按比例,  
	///                                     "H":指定高，宽按比例  
	///                                     "Cut":指定高宽裁减（不变形） </param> 
	public static void MakeThumbnail(string originalImagePath, string thumbnailPath, int width, int height, string mode)
	{
		MakeThumbnail(originalImagePath, thumbnailPath, width, height, mode, "", "");
	}
	#endregion

	#region 生成缩略图(带文字水印)
	/// <summary>
	/// 生成缩略图(带文字水印)
	/// </summary>
	/// <param name="originalImagePath">源图路径（物理路径 Server.MapPath）</param>
	/// <param name="thumbnailPath">缩略图路径（物理路径 Server.MapPath）</param>
	/// <param name="width">缩略图宽度</param>
	/// <param name="height">缩略图高度</param>
	/// <param name="mode">生成缩略图的方式 "HW":指定高宽缩放（可能变形） ,
	///                                     "AUTO" : 指定高宽,居中放入白底背景中 ,
	///                                     "W":指定宽，高按比例,  
	///                                     "H":指定高，宽按比例  
	///                                     "Cut":指定高宽裁减（不变形） </param>  
	///  <param name="watermarkText">文字水印路径（物理路径 Server.MapPath）</param>  
	public static void MakeThumbnail(string originalImagePath, string thumbnailPath, int width, int height, string mode, string watermarkText)
	{
		MakeThumbnail(originalImagePath, thumbnailPath, width, height, mode, watermarkText, "");
	}
	#endregion

	#region 生成缩略图(带文字水印,图片水印)
	/// <summary>
	/// 生成缩略图(带文字水印,图片水印)
	/// </summary>
	/// <param name="originalImagePath">源图路径（物理路径 Server.MapPath）</param>
	/// <param name="thumbnailPath">缩略图路径（物理路径 Server.MapPath）</param>
	/// <param name="width">缩略图宽度</param>
	/// <param name="height">缩略图高度</param>
	/// <param name="mode">生成缩略图的方式 "HW":指定高宽缩放（可能变形） ,
	///                                     "AUTO" : 指定高宽底画板,按比例缩略图片居中放入白底背景底画板中 ,
	///                                     "W":指定宽，高按比例,  
	///                                     "H":指定高，宽按比例  
	///                                     "Cut":指定高宽裁减（不变形） </param>  
	///  <param name="watermarkText">文字水印</param>
	///  <param name="watermarkImage">图片水印路径 (物理路径 Server.MapPath)</param>   
	public static void MakeThumbnail(string originalImagePath, string thumbnailPath, int width, int height, string mode, string watermarkText, string watermarkImage)
	{
		System.Drawing.Image originalImage = System.Drawing.Image.FromFile(originalImagePath);

		//如果图片大小跟要缩小的图片相等 不执行缩小
		if (originalImage.Height != height && originalImage.Width != width)
		{
			int ToBoardWidth = width;  //画板宽度
			int ToBoardHeight = height; //画板高度
			int towidth = width;        //缩略图宽度
			int toheight = height;      //缩略图高度

			int x = 0;
			int y = 0;
			int xj = 0; //绘图时左上角起始x坐标
			int yk = 0; //绘图时左上角起始Y坐标
			int ow = originalImage.Width;  //图片真实宽度
			int oh = originalImage.Height; //图片真实高度

			#region  图片宽高比例处理
			switch (mode.ToUpper())
			{
				case "HW"://指定高宽缩放（可能变形）                
					break;
				case "W"://指定宽，高按比例                    
					toheight = originalImage.Height * width / originalImage.Width;
					ToBoardHeight = toheight; //画板高度跟随缩略高相同
					break;
				case "H"://指定高，宽按比例
					towidth = originalImage.Width * height / originalImage.Height;
					ToBoardWidth = towidth; //画板宽度跟缩略宽相同
					break;
				case "Cut"://指定高宽裁减（不变形）                
					if ((double)originalImage.Width / (double)originalImage.Height > (double)towidth / (double)toheight)
					{
						oh = originalImage.Height;
						ow = originalImage.Height * towidth / toheight;
						y = 0;
						x = (originalImage.Width - ow) / 2;
					}
					else
					{
						ow = originalImage.Width;
						oh = originalImage.Width * height / towidth;
						x = 0;
						y = (originalImage.Height - oh) / 2;
					}
					break;
				case "AUTO"://指定高宽,居中放入白底背景中 
					//先按宽度压缩
					toheight = originalImage.Height * width / originalImage.Width;
					//如果按宽度压缩后的高度高于理想高度,按高度压缩
					if (toheight > height)
					{
						towidth = originalImage.Width * height / originalImage.Height;
						toheight = height;
					}
					else
					{
						towidth = width;
					}
					xj = (width - towidth) / 2;
					yk = (height - toheight) / 2;
					break;
				default:
					break;
			}
			#endregion

			#region  画图

			//新建一个bmp图片
			System.Drawing.Image bitmap = new System.Drawing.Bitmap(ToBoardWidth, ToBoardHeight);

			//新建一个画板
			System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(bitmap);

			//设置高质量插值法
			g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
			//高质量符合度
			g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
			//设置高质量,低速度呈现平滑程度
			g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;

			//清空画布并以透明背景色填充
			g.Clear(System.Drawing.Color.White);

			//在指定位置并且按指定大小绘制原图片的指定部分
			g.DrawImage(originalImage, new System.Drawing.Rectangle(xj, yk, towidth, toheight),
				new System.Drawing.Rectangle(x, y, ow, oh),
				System.Drawing.GraphicsUnit.Pixel);

			#region 水印处理
			//文字水印
			if (watermarkText != "")
			{

				System.Drawing.Font fontWater = new Font("楷体", 10);

				System.Drawing.Brush brushWater = new SolidBrush(Color.Black);

				g.DrawString(watermarkText, fontWater, brushWater, 10, 10);

			}



			//透明图片水印  

			if (watermarkImage != "")
			{

				if (File.Exists(watermarkImage))
				{

					//获取水印图片  

					using (System.Drawing.Image wrImage = System.Drawing.Image.FromFile(watermarkImage))
					{

						//水印绘制条件：原始图片宽高均大于或等于水印图片  

						if (originalImage.Width >= wrImage.Width && originalImage.Height >= wrImage.Height)
						{

							//透明属性  

							ImageAttributes imgAttributes = new ImageAttributes();

							ColorMap colorMap = new ColorMap();

							colorMap.OldColor = Color.FromArgb(255, 0, 255, 0);

							colorMap.NewColor = Color.FromArgb(0, 0, 0, 0);

							ColorMap[] remapTable = { colorMap };

							imgAttributes.SetRemapTable(remapTable, ColorAdjustType.Bitmap);



							float[][] colorMatrixElements = {   

							   new float[] {1.0f,  0.0f,  0.0f,  0.0f, 0.0f},  

							   new float[] {0.0f,  1.0f,  0.0f,  0.0f, 0.0f},  

							   new float[] {0.0f,  0.0f,  1.0f,  0.0f, 0.0f},  

							   new float[] {0.0f,  0.0f,  0.0f,  0.5f, 0.0f},//透明度:0.5  

							   new float[] {0.0f,  0.0f,  0.0f,  0.0f, 1.0f}  

							};



							ColorMatrix wmColorMatrix = new ColorMatrix(colorMatrixElements);

							imgAttributes.SetColorMatrix(wmColorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);

							g.DrawImage(wrImage, new Rectangle(originalImage.Width - wrImage.Width, originalImage.Height - wrImage.Height, wrImage.Width, wrImage.Height), 0, 0, wrImage.Width, wrImage.Height, GraphicsUnit.Pixel, imgAttributes);


						}

						wrImage.Dispose();

					}

				}

			}
			#endregion


			#endregion

			#region 图片处理保存在制定目录下 , 并释放所有资源对象
			try
			{
				//判断如果文件存在,删除源文件
				if (File.Exists(thumbnailPath))
				{
					originalImage.Dispose();
					File.Delete(thumbnailPath);
				}
				//以jpg格式保存缩略图
				bitmap.Save(thumbnailPath, System.Drawing.Imaging.ImageFormat.Jpeg);
			}
			catch (System.Exception e)
			{
				throw e;
			}
			finally
			{

				bitmap.Dispose();
				g.Dispose();
			}
			#endregion
		}
		else
		{
			originalImage.Dispose();
		}
	}
	#endregion
}
====================================================
public class MyPDF
{

	/// <summary>
	/// 调用函数后的返回信息
	/// </summary>
	public string strMsg { get; set; }


	#region 获取PDF中的文本内容
	/// <summary>
	/// 获取PDF中的文本内容
	/// </summary>
	/// <param name="path"></param>
	/// <returns></returns>
	public string GetPDFContent(string path)
	{
		PDDocument doc = PDDocument.load(path);
		PDFTextStripper pdfStripper = new PDFTextStripper();
		string text = pdfStripper.getText(doc);
		return text;
	}
	#endregion

	#region 在页面上显示PDF
	/// <summary>
	/// 在页面上显示PDF
	/// </summary>
	/// <param name="path">文件路径</param>
	public void PDFShowPage(string path,string name)
	{
		HttpContext.Current.Response.Clear();
		HttpContext.Current.Response.ContentType = "application/pdf";
		HttpContext.Current.Response.AddHeader("content-disponstion", "filename=" + name);


		byte[] buffer = new byte[256];

		FileStream fs = File.Open(path, FileMode.Open);
		HttpContext.Current.Response.AddHeader("content-length", fs.Length.ToString());
		int length = (int)fs.Length;

		if (HttpContext.Current.Response.IsClientConnected)
		{
			while (length > -1)
			{
				length = length - buffer.Length;
				fs.Read(buffer, 0, buffer.Length);
				HttpContext.Current.Response.OutputStream.Write(buffer, 0, buffer.Length);
			}

		}
		fs.Close();
		HttpContext.Current.Response.End();
	}
	#endregion

	#region PDF加水印，此方面把水印图放打在pdf的最上层，所以注意一定要用透明图片，要不然会影响查看效果

	/// <summary>
	/// PDF加水印
	/// </summary>
	/// <param name="inputfilepath">源PDF文件 如：D:\\a.pdf</param>
	/// <param name="outputfilepath">加水印后PDF文件保存路径 如：D:\\b.pdf</param>
	/// <param name="ModelPicName">水印文件路径 如： D:\\c.png</param>
	/// <returns>返回</returns>
	public bool ToWatermark(string inputfilepath, string outputfilepath, string ModelPicName)
	{
		ToWatermark(inputfilepath,outputfilepath,ModelPicName,0,0);
		return true;
	}



	/// <summary>
	///  PDF加水印
	/// </summary>
	/// <param name="inputfilepath">源PDF文件  如：D:\\a.pdf</param>
	/// <param name="outputfilepath">加水印后PDF文件路径  如：D:\\b.pdf</param>
	/// <param name="ModelPicName">水印文件路径  D:\\c.png</param>
	/// <param name="top">离顶部距离</param>
	/// <param name="left">离左边距离,如果为负,则为离右边距离</param>
	/// <returns>返回</returns>
	public bool ToWatermark(string inputfilepath, string outputfilepath, string ModelPicName, float top, float left)
	{
		PdfReader pdfReader = null;
		PdfStamper pdfStamper = null;
		string newoutputfilepath = string.Empty;

		if (inputfilepath==outputfilepath)
		{
			newoutputfilepath = outputfilepath;   //把要存的路径保存起来
			outputfilepath = outputfilepath.ToLower().Replace(".pdf", "tem.pdf");
		}
		

		try
		{
			pdfReader = new PdfReader(inputfilepath);

			int numberOfPages = pdfReader.NumberOfPages;

			iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);

			float width = psize.Width;

			float height = psize.Height;

			pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
			
			PdfContentByte waterMarkContent;

			iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(ModelPicName);

			image.GrayFill = 20;//透明度，灰色填充
			//image.Rotation//旋转
			//image.RotationDegrees//旋转角度
			//水印的位置
			if (left < 0)
			{
				left = width - image.Width + left;
			}

			image.SetAbsolutePosition(left, (height - image.Height) - top);


			//每一页加水印,也可以设置某一页加水印
			for (int i = 1; i <= numberOfPages; i++)
			{
				waterMarkContent = pdfStamper.GetOverContent(i);

				waterMarkContent.AddImage(image);
			}
			this.strMsg = "success";
			return true;
		}
		catch (Exception ex)
		{
			this.strMsg = ex.Message.Trim();
			return false;
		}
		finally
		{
			if (pdfStamper != null)
				pdfStamper.Close();

			if (pdfReader != null)
				pdfReader.Close();

			//当原路径和打水印后路径一样时，删除原路径文件，把新水印文件改名复制到此路径下
			if (inputfilepath == newoutputfilepath && File.Exists(inputfilepath) && File.Exists(outputfilepath))
			{
				File.Delete(inputfilepath);
				File.Move(outputfilepath, newoutputfilepath);
			}
		}
	}
	#endregion
}
=====================================================
public static class CommonHelper
{
	/// <summary>   
	/// 截取字符串。   
	/// </summary>   
	/// <param name="str">要截取的字符串</param>   
	/// <param name="number">保留的字节数。按全角计算</param>   
	/// <returns>指定长度的字符串</returns>   
	public static string StringCut(string str, int number)
	{
		string reStr = str;
		if (str.Length > number)
		{
			ASCIIEncoding ascii = new ASCIIEncoding();
			int tempLen = 0;
			byte[] s = ascii.GetBytes(str);
			for (int i = 0; i < s.Length; i++)
			{
				if ((int)s[i] == 63)
				{
					tempLen += 2;
				}
				else
				{
					tempLen += 1;
				}
				if (tempLen > number * 2)
				{
					reStr = str.Substring(0, i + 1) + "...";
					break;
				}
			}
		}

		return reStr;
	}
}
===============================
public class FileExtension
{
	/// <summary>
	/// 返回指定目录下的所有文件信息
	/// </summary>
	/// <param name="strDirectory"></param>
	/// <returns></returns>
	public List<FileInfo> GetAllFilesInDirectory(string strDirectory)
	{
		List<FileInfo> listFiles = new List<FileInfo>(); //保存所有的文件信息  
		DirectoryInfo directory = new DirectoryInfo(strDirectory);
		DirectoryInfo[] directoryArray = directory.GetDirectories();
		FileInfo[] fileInfoArray = directory.GetFiles();
		if (fileInfoArray.Length > 0) listFiles.AddRange(fileInfoArray);
		foreach (DirectoryInfo _directoryInfo in directoryArray)
		{
			DirectoryInfo directoryA = new DirectoryInfo(_directoryInfo.FullName);
			DirectoryInfo[] directoryArrayA = directoryA.GetDirectories();
			FileInfo[] fileInfoArrayA = directoryA.GetFiles();
			if (fileInfoArrayA.Length > 0) listFiles.AddRange(fileInfoArrayA);
			GetAllFilesInDirectory(_directoryInfo.FullName);//递归遍历  
		}
		return listFiles;
	}

	/// <summary>
	/// 从一个目录将其内容移动到另一目录  
	/// </summary>
	/// <param name="directorySource">源目录</param>
	/// <param name="directoryTarget">目标目录</param>
	private void MoveFolderTo(string directorySource, string directoryTarget)
	{
		//检查是否存在目的目录  
		if (!Directory.Exists(directoryTarget))
		{
			Directory.CreateDirectory(directoryTarget);
		}
		//先来移动文件  
		DirectoryInfo directoryInfo = new DirectoryInfo(directorySource);
		FileInfo[] files = directoryInfo.GetFiles();
		//移动所有文件  
		foreach (FileInfo file in files)
		{
			//如果自身文件在运行，不能直接覆盖，需要重命名之后再移动  
			if (File.Exists(Path.Combine(directoryTarget, file.Name)))
			{
				if (File.Exists(Path.Combine(directoryTarget, file.Name + ".bak")))
				{
					File.Delete(Path.Combine(directoryTarget, file.Name + ".bak"));
				}
				File.Move(Path.Combine(directoryTarget, file.Name), Path.Combine(directoryTarget, file.Name + ".bak"));

			}
			file.MoveTo(Path.Combine(directoryTarget, file.Name));

		}
		//最后移动目录  
		DirectoryInfo[] directoryInfoArray = directoryInfo.GetDirectories();
		foreach (DirectoryInfo dir in directoryInfoArray)
		{
			MoveFolderTo(Path.Combine(directorySource, dir.Name), Path.Combine(directoryTarget, dir.Name));
		}
	}

	/// <summary>
	/// 从一个目录将其内容复制到另一目录
	/// </summary>
	/// <param name="directorySource">源目录</param>
	/// <param name="directoryTarget">目标目录</param>
	static void CopyFolderTo(string directorySource, string directoryTarget)
	{
		//检查是否存在目的目录  
		if (!Directory.Exists(directoryTarget))
		{
			Directory.CreateDirectory(directoryTarget);
		}
		//先来复制文件  
		DirectoryInfo directoryInfo = new DirectoryInfo(directorySource);
		FileInfo[] files = directoryInfo.GetFiles();
		//复制所有文件  
		foreach (FileInfo file in files)
		{
			file.CopyTo(Path.Combine(directoryTarget, file.Name));
		}
		//最后复制目录  
		DirectoryInfo[] directoryInfoArray = directoryInfo.GetDirectories();
		foreach (DirectoryInfo dir in directoryInfoArray)
		{
			CopyFolderTo(Path.Combine(directorySource, dir.Name), Path.Combine(directoryTarget, dir.Name));
		}
	}
}
========================================
public class Zip
{
	public Zip()
	{
	}

	public static byte[] ZipDirectory(string directoryToCompress)
	{
		string parentDirectory = directoryToCompress.Substring(0, directoryToCompress.LastIndexOf(@"\"));
		string zipFileFullName = Path.Combine(parentDirectory, Guid.NewGuid() + ".rar");
		System.Text.Encoding zip_Encoding = System.Text.Encoding.GetEncoding("UTF-8");
		using (ZipFile zip = new ZipFile(zip_Encoding))
		{
			zip.AddDirectory(directoryToCompress);
			zip.Save(zipFileFullName);
		}

		return ConvertFileToBytesAndDeleteFile(zipFileFullName);
	}

	public static byte[] ZipFiles(List<string> srcFiles,string zipFolder)
	{
		string zipFileFullName = Path.Combine(zipFolder, Guid.NewGuid().ToString() + ".rar");
		string tempDirectory = Path.Combine(zipFolder, Guid.NewGuid().ToString());
		if (!Directory.Exists(tempDirectory))
		{
			Directory.CreateDirectory(tempDirectory);
		}
		srcFiles.ForEach(file => {
			if (File.Exists(file)) {
				File.Copy(file, Path.Combine(tempDirectory, Path.GetFileName(file)));
			}
		});
		System.Text.Encoding zip_Encoding = System.Text.Encoding.GetEncoding("UTF-8");
		using (ZipFile zip = new ZipFile(zip_Encoding))
		{
			zip.AddDirectory(tempDirectory);
			zip.Save(zipFileFullName);
		}
		Directory.Delete(tempDirectory, true);
		return ConvertFileToBytesAndDeleteFile(zipFileFullName);
	}

	private static byte[] ConvertFileToBytesAndDeleteFile(string fileFullName)
	{
		byte[] bytContent = null;

		if (!File.Exists(fileFullName))
		{
			return bytContent;
		}

		FileStream stream = null;
		BinaryReader reader = null;
		try
		{
			stream = new FileStream(fileFullName, FileMode.Open);

			reader = new BinaryReader((Stream)stream);
			bytContent = reader.ReadBytes((Int32)stream.Length);
		}
		catch (Exception)
		{
			
		}
		finally
		{
			if (stream != null)
			{
				stream.Close();
			}
			if (reader != null)
			{
				reader.Close();
			}

			File.Delete(fileFullName);
		}

		return bytContent;
	}
}
===============================
Image image = Image.FromFile(imageFullPath);
================================
